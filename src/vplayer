from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import numpy as np
import cv2
import os

class Player(QWidget):
    def __init__(self, *args):
        super(QWidget, self).__init__()
        # store displays
        self._displays = []
        # set fps
        self.fps = 25
        # set openCV capture
        self.cap = cv2.VideoCapture(*args)
        self.filepath = args[0]


    def setFPS(self, fps):
        self.fps = fps

    def addDisplay(self, display):
        self._displays.append(display)

    def nextFrameSlot(self):
        ret, frame = self.cap.read()
        #frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        if ret:
            img = QImage(frame, frame.shape[1], frame.shape[0], QImage.Format_RGB888)
            pix = QPixmap.fromImage(img)
            if self._displays:
                for display in self._displays:
                    if display.available:
                        display.video_frame.setPixmap(pix)
        else:
            self.parent().endCapture()
            if self._displays:
                for display in self._displays:
                    if display.available:
                        display.video_frame.setPixmap(QPixmap())

    def start(self):
        self.timer = QTimer()
        ret, frame = self.cap.read()
        if ret:
        	if frame.any():
        		print(self.filepath, frame.shape)
        # OpenCV yields frames in BGR format
        self.timer.timeout.connect(self.nextFrameSlot)
        self.timer.start(1000./self.fps)

    def stop(self):
        self.timer.stop()

    def deleteLater(self):
        self.cap.release()
        super(QWidget, self).deleteLater()

class Display(QWidget):
    """docstring for Display"""
    def __init__(self):
        super(Display, self).__init__()
        self.setFixedSize(640, 360)
        self.video_frame = QLabel()
        lay = QVBoxLayout()
        self.mute_button = QPushButton('Black')
        self.mute_button.setCheckable(True)
        self.mute_button.toggled.connect(self.mute)
        lay.addWidget(self.mute_button)
        lay.addWidget(self.video_frame)
        self.setLayout(lay)
        self._available = True
        self.show()

    def mute(self, state):
        if state:
            self.available = False
            self.video_frame.setPixmap(QPixmap())
            #self.video_frame.hide()
        else:
            #self.video_frame.show()
            self.available = True

    @property
    def available(self):
        return self._available
    @available.setter
    def available(self, state):
        self._available = state

class MediaBin(object):
    """docstring for MediaBin"""
    def __init__(self, arg):
        super(MediaBin, self).__init__()
        self.arg = arg
        

class ControlPanel(QWidget):
    """
    """
    def __init__(self):
        super(ControlPanel, self).__init__()
        self.player = None
        self.media_bin_menu = QListWidget()
        result = [os.path.join(dp, f) for dp, dn, filenames in os.walk(os.path.abspath('/Users/reno/Dropbox')) for f in filenames if os.path.splitext(f)[1] == '.mov']
        for res in result:
            self.media_bin_menu.addItem(res)
        self.media_bin_menu.itemSelectionChanged.connect(self.media_bin_selection_changed)
        self.start_button = QPushButton('Start')
        self.start_button.clicked.connect(self.startCapture)
        self.quit_button = QPushButton('End')
        self.quit_button.clicked.connect(self.endCapture)
        self.end_button = QPushButton('Stop')
        self.preview = Display()
        self.desktop = Display()
        self.control_layout = QGridLayout()
        self.control_layout.addWidget(self.media_bin_menu, 0, 0, 1, 1)
        self.control_layout.addWidget(self.start_button, 0, 1, 1, 1)
        self.control_layout.addWidget(self.end_button, 0, 2, 1, 1)
        self.control_layout.addWidget(self.quit_button, 0, 3, 1, 1)
        self.control_layout.addWidget(self.preview, 1, 0, 4, 4)
        #self.setMaximumSize(300, 200)
        self.setLayout(self.control_layout)

    def media_bin_selection_changed(self):
        path = self.media_bin_menu.selectedItems()[0]
        self.loadMovie(path.text())

    def loadMovie(self, path):
        self.filepath = path

    def startCapture(self):
        if not self.player:
            self.player = Player(self.filepath)
            self.player.addDisplay(self.desktop)
            self.player.addDisplay(self.preview)
            self.end_button.clicked.connect(self.player.stop)
            # self.player.setFPS(1)
            self.player.setParent(self)
            self.player.setWindowFlags(Qt.Tool)
            self.player.start()
        else:
            self.endCapture()
            self.startCapture()

    def endCapture(self):
        if self.player:
            self.player.deleteLater()
            self.player = None

class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        control_panel = ControlPanel()
        self.setWindowTitle('Control Panel')
        self.move(0, 0)
        self.setCentralWidget(control_panel)
        self.show()


if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    window = MainWindow()
    sys.exit(app.exec_())
